{
    # Uncomment the schema for intellisense while editing
    # "$schema": "https://json.schemastore.org/github-workflow",

    "name": "CI",
    "on": ["push", "pull_request"],

    "env": {
        "RUST_BACKTRACE": "1",
        "RUST_LOG": "cratesfyi,rustwide=info",
        "AWS_ACCESS_KEY_ID": "docsrs",
        "AWS_SECRET_ACCESS_KEY": "secret_key",
        "POSTGRES_USER": "docsrs",
        "POSTGRES_PASSWORD": "password"
    },

    "jobs": {
        "test": {
            "name": "Test",
            "runs-on": "${{ matrix.os }}",
            "strategy": {
                "matrix": {
                    "os": ["ubuntu-latest"],
                },
                # Don't cancel all jobs when one fails
                "fail-fast": false,
            },
            "env": {
                "CRATESFYI_PREFIX": "ignored/cratesfyi-prefix",
                # Build the database and minio urls from environmental variables, using the ports that github selected for the containers
                "CRATESFYI_DATABASE_URL": "postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:${{ job.services.postgres.ports[5432] }}",
                "S3_ENDPOINT": "http://localhost:${{ job.services.minio.ports[9000] }}",
            },

            # Run Postgres and Minio as service containers
            "services": {
                "postgres": {
                    "image": "postgres",
                    "ports": [5432, 5432],
                    "volumes": [
                        "postgres-data:/var/lib/postgresql/data",
                        "postgres:/docker-entrypoint-initdb.d"
                    ],
                    "env": {
                        "POSTGRES_USER": "${{ env.POSTGRES_USER }}",
                        "POSTGRES_PASSWORD": "${{ env.POSTGRES_PASSWORD }}"
                    },
                    # Wait for postgres to start up
                    "options": "
                        --health-cmd pg_isready
                        --health-interval 10s
                        --health-timeout 5s
                        --health-retries 5
                    "
                },
                "minio": {
                    "image": "minio/minio",
                    "ports": [9000, 9000],
                    "volumes": ["minio-data:/data"],
                    "env": {
                        "MINIO_ACCESS_KEY": "${{ env.AWS_KEY_ID }}",
                        "MINIO_SECRET_KEY": "${{ env.AWS_ACCESS_KEY }}"
                    }
                }
            },

            "steps": [
                {
                    "name": "Checkout",
                    "uses": "actions/checkout@v2"
                },

                {
                    "name": "Install Rust",
                    "uses": "actions-rs/toolchain@v1",
                    "with": {
                        "profile": "minimal",
                        "toolchain": "stable",
                        "override": true,
                    },
                },

                # Install cargo-sweep for cleaning the build cache
                {
                    "name": "Install crates",
                    "uses": "actions-rs/cargo@v1",
                    "with": {
                        "command": "install",
                        "args": "cargo-sweep"
                    }
                },

                {
                    "name": "Cache cargo artifacts",
                    "uses": "actions/cache@v2",
                    "with": {
                        "path": "
                            ~/.cargo/bin
                            ~/.cargo/git
                            ~/.cargo/registry
                        ",
                        "key": "${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}"
                    }
                },
                {
                    "name": "Cache build artifacts",
                    "uses": "actions/cache@v2",
                    "with": {
                        "path": "target",
                        # Use the current rustc version hash as part of the cache key
                        "key": "${{ runner.os }}-cargo-build-target-${{ steps.install-rust.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}"
                    }
                },

                # Store the current state of the build cache so we can remove old artifacts later
                {
                    "name": "Prebuild sweep",
                    "uses": "actions-rs/cargo@v1",
                    "with": {
                        "command": "sweep",
                        "args": "--stamp",
                    }
                },

                {
                    "name": "Build",
                    "uses": "actions-rs/cargo@v1",
                    "with": {
                        "command": "build",
                        "args": "--locked"
                    }
                },

                {
                    "name": "Run tests",
                    "uses": "actions-rs/cargo@v1",
                    "with": {
                        "command": "test",
                        "args": "--locked -- --test-threads=1"
                    }
                },

                # Remove all build artifacts not involved in the most recent build
                {
                    "name": "Postbuild sweep",
                    "uses": "actions-rs/cargo@v1",
                    "with": {
                        "command": "sweep",
                        "args": "--file",
                    }
                },
            ]
        },

        "docker": {
            "name": "Build docker image",
            "runs-on": "${{ matrix.os }}",
            "strategy": {
                "matrix": {
                    "os": ["ubuntu-latest"],
                },
                # Don't cancel all jobs when one fails
                "fail-fast": false,
            },

            "steps": [
                {
                    "name": "Checkout",
                    "uses": "actions/checkout@v2"
                },
                {
                    "name": "Build image",
                    "run": "docker build --tag docs-rs ."
                },
                {
                    "name": "Upload image to ECR",
                    "uses": "rust-lang/simpleinfra/github-actions/upload-docker-image@master",
                    "with": {
                        "image": "docs-rs",
                        "repository": "staging-docs-rs",
                        "region": "us-west-1",
                        "aws_access_key_id": "${{ secrets.aws_access_key_id }}",
                        "aws_secret_access_key": "${{ secrets.aws_secret_access_key }}"
                    },
                    "if": "github.ref == 'refs/heads/master'"
                }
            ]
        },

        "style": {
            "name": "${{ matrix.tool }}",
            "runs-on": "ubuntu-latest",
            "strategy": {
                "matrix": {
                    # Reduce duplication since all the tools run the same way
                    "tool": ["clippy", "rustfmt"]
                },
                # Don't cancel all jobs when one fails
                "fail-fast": false,
            },

            "steps": [
                {
                    "name": "Checkout",
                    "uses": "actions/checkout@v2"
                },
                # Install stable rust with clippy and rustfmt
                {
                    "uses": "actions-rs/toolchain@v1",
                    "with": {
                        "toolchain": "stable",
                        "default": "minimal",
                        "override": true,
                        "components": "${{ matrix.tool }}"
                    }
                },

                # Cache cargo artifacts
                {
                    "name": "Cache cargo artifacts",
                    "uses": "actions/cache@v2",
                    "with": {
                        "path": "
                            ~/.cargo/bin
                            ~/.cargo/git
                            ~/.cargo/registry
                        ",
                        "key": "${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}"
                    }
                },

                {
                    "name": "Clippy",
                    "uses": "actions-rs/clippy-check@v1",
                    "with": {
                        "token": "${{ secrets.GITHUB_TOKEN }}",
                        "args": "--locked -- -D warnings"
                    },
                    "if": "matrix.tool == 'clippy'"
                },
                {
                    "name": "Rustfmt",
                    "uses": "actions-rs/cargo@v1",
                    "with": {
                        "command": "fmt",
                        "args": "-- --check"
                    },
                    "if": "matrix.tool == 'rustfmt'"
                }
            ]
        }
    },
}
